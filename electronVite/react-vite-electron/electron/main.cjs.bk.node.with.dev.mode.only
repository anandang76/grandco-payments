// main.js (Electron Main Process + Express Server)

const { app, BrowserWindow, Menu } = require('electron');
const path = require('path');
const express = require('express');
const bodyParser = require('body-parser');
// const Payment = require('./../backend/controller/paymentController');
// const { logger } = require('./../backend/utils/logger');

const Payment = require(path.resolve(__dirname, '../backend/controller/paymentController'));
const { logger } = require(path.resolve(__dirname, '../backend/utils/logger'));

// const isDev = process.env.VITE_DEV_SERVER_URL ? true : false; 
const isDev = false; 
const isMac = process.platform === 'darwin';
const port = 5001; // Express server port

let mainWindow;

// Express setup
const expressApp = express();
expressApp.use(express.static(path.join(__dirname, 'public')));
expressApp.use(bodyParser.json());

const testInfo = (req, res) => {
  console.log("GET /getApiInfo called");
  res.json({ message: "Test route hit successfully!" });
};

// API routes
expressApp.post('/openPaymentGateway', Payment.openPaymentGateway);
expressApp.post('/startPaymentTransaction', Payment.startPaymentTransaction);
expressApp.post('/getPaymentTransactionStatus', Payment.getPaymentTransactionStatus);
expressApp.post('/cancelPaymentTransaction', Payment.cancelPaymentTransaction);
expressApp.post('/printReceipt', Payment.printReceipt);
expressApp.post('/linkedRefund', Payment.linkedRefund);
expressApp.get('/getApiInfo', Payment.getApiInfo);
expressApp.get('/test', testInfo);

// Start the Express server
expressApp.listen(port, () => {
  logger.info(`Express server running on port ${port}`);
});


// Create the main Electron window
function createMainWindow() {
  mainWindow = new BrowserWindow({
    width: 1000,
    height: 600,
    icon: path.join(__dirname, 'public/appIcon.png'),
    resizable: isDev,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false, // Disable context isolation to access Node.js APIs in renderer
      preload: path.join(__dirname, 'preload.cjs'),  // Optional if you use a preload script
    },
  });

  if (isDev) {
    // In development, load the Vite dev server
    mainWindow.loadURL(process.env.VITE_DEV_SERVER_URL);
    mainWindow.webContents.openDevTools(); // Open dev tools in dev mode
  } else {
    // In production, load the built app from the dist folder
    mainWindow.loadFile(path.join(__dirname, '../dist/index.html'));
  }

  mainWindow.on('closed', () => (mainWindow = null));
}

// Initialize the app
app.on('ready', () => {
  createMainWindow();

  const mainMenu = Menu.buildFromTemplate(menu);
  Menu.setApplicationMenu(mainMenu);
});

app.on('window-all-closed', () => {
  if (!isMac) app.quit();
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) createMainWindow();
});

// Menu template (optional)
const menu = [
  ...(isMac
    ? [
        {
          label: app.name,
          submenu: [{ label: 'About', click: () => console.log('About dialog') }],
        },
      ]
    : []),
  { role: 'fileMenu' },
  ...(isDev
    ? [
        {
          label: 'Developer',
          submenu: [
            { role: 'reload' },
            { role: 'forcereload' },
            { role: 'toggledevtools' },
          ],
        },
      ]
    : [
      {
        label: 'Developer',
        submenu: [
          { role: 'reload' },
          { role: 'forcereload' },
          { role: 'toggledevtools' },
        ],
      },
    ]),
];
